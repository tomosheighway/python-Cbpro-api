import websocket , json 
#import dateutil.parser

star_trades =[]  #used to store ticks of interest 
current_tick= None
previous_tick = None
min_high = 0 
min_low = 999999999
min_candles =[]

def on_open(ws):
    print("opened connection")

    subscribe_message = {
        "type": "subscribe",
        "channels":[
            {
                "name":"ticker",
                "product_ids":[
                    "BTC-USD"  
                    #,"ETH-USD"
                ]

            }
        ]
    }
    ws.send(json.dumps(subscribe_message))

def on_msg(ws,msg):
    
    global previous_tick, current_tick
    previous_tick = current_tick
    current_tick = json.loads(msg)
    
    #current values
    current_price = float(current_tick['price'])
    product_id = current_tick['product_id']
    best_bid = float(current_tick['best_bid'])
    best_ask = float(current_tick['best_ask'])
    spread = round(best_ask-best_bid, 3) 
    date_time = current_tick['time'].split("T", 1)  #split the date and time 
    date = date_time[0]
    time = date_time[1][0:8]    #slice to give time as 00:00:00
    
    #previous tick values
    last_date_time = previous_tick['time'].split("T", 1)  #split the date and time 
    #last_date = last_date_time[0]
    last_time = last_date_time[1][0:8]
    

    # if the difference between bid and ask is greater than 4 star the tick. 
    if spread > 20:      
        big_gap = "*"

        # add trade to star trades - Todo : add trade time. 
        star_trades.append({
            "Date": date,
            "Time": time, 
            "price": current_price,
            "spread": spread
        })
        print(star_trades)
        
    else: 
        big_gap = " "

# create candlestick data for each minute
    if time[0:5] == last_time[0:5]:   #if ticks are not in the same minute 
        global min_high, min_low
        
        if current_price > min_high:        #sets min_high variable to the highest price that minute
            min_high= current_price
            #print("new minute high ", min_high) 
        if current_price < min_low:
            min_low= current_price
            #print("New minute low: ", min_low)
    else: # new minute 
        min_candles.append({
            "Date": date,
            "Time": time, 
            "low" : min_low, 
            "high": min_high,
            "live": current_price
        })
        #test #print(date,time,"       Last minute high value: ", min_high , "         Last minute low value: ", min_low)
        #test #print(date,time, "        Pair:",product_id, "    Trading price:",current_price , "   Best bid:", best_bid , "     Best ask:",best_ask , "     Spread:", spread , big_gap)
        print(min_candles)
        min_high = 0                #reset values 
        min_low = 999999999
    
      

            
    
    #print("P:", previous_tick['time'], "_____________________" ,  "C:", current_tick['time'] , time)
    #print(date,time, "        Pair:",product_id, "    Trading price:",current_price , "   Best bid:", best_bid , "     Best ask:",best_ask , "     Spread:", spread , big_gap )
    #print(json.loads(msg))

    #tick_datetime_object = dateutil.parser.parse(current_tick['time'])

socket = "wss://ws-feed.pro.coinbase.com"
ws = websocket.WebSocketApp(socket, on_open=on_open , on_message=on_msg)
ws.run_forever()
